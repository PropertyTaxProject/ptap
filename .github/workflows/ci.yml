name: CI

env:
  POETRY_VIRTUALENVS_IN_PROJECT: true

permissions:
  id-token: write
  contents: read

on:
  pull_request:
    types: [opened, synchronized]
  push:
  workflow_dispatch:

jobs:
  python-checks:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - run: pipx install poetry

      - uses: actions/setup-python@v4
        id: py
        with:
          python-version: 3.11
          cache: poetry

      - run: poetry install --no-interaction

      - run: poetry run black . --check

      - run: poetry run ruff check .

  js-checks:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: "17.x"

      - uses: actions/cache@v1
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-

      - run: npm ci --prefer-offline --no-audit --no-optional

      - run: npm run lint

      - run: npm run prettier

      - run: npm run build

  deploy:
    needs: [python-checks, js-checks]
    # if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::146849845625:role/ptap-terraform-github-role
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ptap
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Update Lambda with Terraform
        working-directory: ./tf
        run: |
          terraform init
          terraform plan

# if:  TODO: only on main
# TODO:
# - build docker with SHA, also tag latest
# - push to ECR, will need creds (maybe role?)
# - access role/creds for terraform apply
# - run tf apply to update Lambda
# - Deploy assets to S3
