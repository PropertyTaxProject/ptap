{"version":3,"sources":["general/header.jsx","landing/landing-page.jsx","serviceWorker.js","requests.js","appeal/homeowner/form-input.jsx","appeal/comparables/characteristics.jsx","appeal/homeowner/pin-lookup.jsx","appeal/appeal.jsx","appeal/damage/image-upload.jsx","appeal/damage/damage-input.jsx","index.jsx"],"names":["Header","Layout","PTAPHeader","theme","mode","Item","key","href","to","Boolean","window","location","hostname","match","submitForm","info","a","axios","post","resp","console","log","data","response","error","submitAppeal","targetProperty","comparables","userInfo","body","target_pin","detroit","responseType","saveAs","name","split","join","toLowerCase","formItemLayout","labelCol","span","wrapperCol","xs","sm","md","lg","tailFormItemLayout","offset","HomeownerInfo","label","rules","required","message","whitespace","type","PropertyForm","props","Form","useForm","form","city","pin","onFinish","values","appealType","appeal_type","labelAlign","scrollToFirstError","autoComplete","noStyle","onClick","back","htmlType","Column","Table","re","createTitle","title","replace","x","toUpperCase","CharacteristicsTable","headers","removeComparable","useState","loading","setLoading","Columns","map","header","dataIndex","sort","labeledData","property","idx","dataSource","scroll","render","text","record","danger","Number","parseInt","then","PropertyInfo","cols","gridStyle","width","Math","round","textAlign","characteristics","Object","entries","filter","description","title1","title2","t1","t2","Grid","hoverable","style","Characteristics","lookupPin","candidates","Lookup","pins","setPin","logPin","columns","parcel_num","Group","compact","placeholder","length","properties","ele","i","Appeal","setComparables","setHeaders","setTargetProperty","setInfo","view","selectedPin","labeled_headers","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","React","Component","Input","TextArea","Select","Option","img","callback","addEventListener","beforeUpload","isJpgOrPng","isLt8M","size","Content","Footer","Page","className","padding","path","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9bbd37a7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Layout, Menu } from 'antd';\r\n\r\nconst { Header } = Layout;\r\n\r\nconst PTAPHeader = () => (\r\n  <Header>\r\n    <Menu theme=\"dark\" mode=\"horizontal\">\r\n      <Menu.Item key=\"1\"><a href=\"/\">Property Tax Appeal Project: Automated Appeal System</a></Menu.Item>\r\n    </Menu>\r\n  </Header>\r\n);\r\n\r\nexport default PTAPHeader;\r\n","import React from 'react';\r\nimport { Button, Space } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PTAPHeader = () => (\r\n  <>\r\n    <h2>Welcome to the Property Tax Appeal Project&apos;s automated appeal system landing page.</h2>\r\n    <p>We currently have automated appeal systems for Detroit and Chicago.</p>\r\n    <p>Click one of the buttons to get started with your appeal.</p>\r\n    <Space>\r\n      <Button><Link to=\"/detroit\">Detroit</Link></Button>\r\n      <Button><Link to=\"/chicago\">Chicago</Link></Button>\r\n    </Space>\r\n  </>\r\n);\r\n\r\nexport default PTAPHeader;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport const submitForm = async (info) => {\r\n  try {\r\n    const resp = await axios.post('/api_v1/submit', info);\r\n    console.log(resp);\r\n    return resp.data.response;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const submitAppeal = async (targetProperty, comparables, userInfo) => {\r\n  try {\r\n    const body = { target_pin: targetProperty, comparables, ...userInfo };\r\n    console.log(body);\r\n    //const detroit = userInfo.appeal_type === 'detroit_single_family'; TEMPORARY DOWNLOAD ALL\r\n    const detroit = true;\r\n    const resp = await axios.post('/api_v1/submit2', body, { responseType: detroit ? 'blob' : 'json' }); // detroit downloads file, chicago returns json\r\n    if (detroit) {\r\n      saveAs(resp.data, `${userInfo.name.split(' ').join('-').toLowerCase()}-appeal.docx`);\r\n    } else {\r\n      console.log(resp);\r\n    }\r\n    // TRIGGER SUBMISSION PAGE\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Space,\r\n} from 'antd';\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 24,\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 20,\r\n    },\r\n    md: {\r\n      span: 18,\r\n    },\r\n    lg: {\r\n      span: 14,\r\n    },\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n  },\r\n};\r\n\r\nconst HomeownerInfo = () => (\r\n  <>\r\n    <Row>\r\n      <Col xs={{ span: 24, offset: 0 }} sm={{ span: 24, offset: 0 }}>\r\n        <h1>Homeowner Information</h1>\r\n        <br />\r\n      </Col>\r\n    </Row>\r\n    <Form.Item\r\n      name=\"name\"\r\n      label=\"Full Name\"\r\n      rules={[\r\n        {\r\n          required: true,\r\n          message: 'Please input your full name!',\r\n          whitespace: true,\r\n        },\r\n      ]}\r\n    >\r\n      <Input />\r\n    </Form.Item>\r\n    <Form.Item\r\n      name=\"email\"\r\n      label=\"Email\"\r\n      rules={[\r\n        {\r\n          required: true,\r\n          message: 'Please input your Email!',\r\n          whitespace: true,\r\n          type: 'email',\r\n        },\r\n      ]}\r\n    >\r\n      <Input />\r\n    </Form.Item>\r\n    <Form.Item\r\n      name=\"address\"\r\n      label=\"Street Address\"\r\n      rules={[\r\n        {\r\n          required: true,\r\n          message: 'Please input your street address!',\r\n          whitespace: true,\r\n        },\r\n      ]}\r\n    >\r\n      <Input />\r\n    </Form.Item>\r\n\r\n    <Form.Item\r\n      name=\"phone\"\r\n      label=\"Phone Number\"\r\n      rules={[\r\n        {\r\n          required: true,\r\n          message: 'Please input your phone number!',\r\n          whitespace: true,\r\n        },\r\n      ]}\r\n    >\r\n      <Input />\r\n    </Form.Item>\r\n\r\n    <Form.Item\r\n      name=\"city\"\r\n      label=\"City\"\r\n      rules={[\r\n        {\r\n          required: true,\r\n          message: 'Please input your city!',\r\n          whitespace: true,\r\n        },\r\n      ]}\r\n    >\r\n      <Input />\r\n    </Form.Item>\r\n\r\n    <Form.Item\r\n      name=\"state\"\r\n      label=\"State\"\r\n      rules={[\r\n        {\r\n          required: true,\r\n          message: 'Please input your State!',\r\n          whitespace: true,\r\n        },\r\n      ]}\r\n    >\r\n      <Input />\r\n    </Form.Item>\r\n\r\n    <Form.Item\r\n      name=\"zip\"\r\n      label=\"Zip Code\"\r\n      rules={[\r\n        {\r\n          required: true,\r\n          message: 'Please input your zip code!',\r\n          whitespace: true,\r\n        },\r\n      ]}\r\n    >\r\n      <Input />\r\n    </Form.Item>\r\n  </>\r\n);\r\n\r\n// unused for now, we can use this code if we ever want an option to directly enter a pin\r\n// const PinForm = () => (\r\n//   <Form.Item\r\n//     name=\"pin\"\r\n//     label=\"Pin\"\r\n//     rules={[\r\n//       {\r\n//         required: true,\r\n//         message: 'Please input your pin!',\r\n//         whitespace: true,\r\n//       },\r\n//     ]}\r\n//   >\r\n//     <Input />\r\n//   </Form.Item>\r\n// );\r\n\r\nconst PropertyForm = (props) => {\r\n  const [form] = Form.useForm();\r\n  const { submitForm, city, pin } = props;\r\n\r\n  const onFinish = (values) => {\r\n    let appealType;\r\n    if (city === 'detroit') {\r\n      appealType = 'detroit_single_family';\r\n    } else if (city === 'chicago') {\r\n      appealType = 'cook_county_single_family';\r\n    }\r\n    const info = { ...values, pin, appeal_type: appealType };\r\n    console.log('Received values of form: ', info);\r\n    submitForm(info);\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      form={form}\r\n      name=\"Housing Information\"\r\n      onFinish={onFinish}\r\n      labelAlign=\"left\"\r\n      scrollToFirstError\r\n      autoComplete=\"off\"\r\n      {...formItemLayout}\r\n    >\r\n      <Row>\r\n        <Col xs={{ span: 24, offset: 0 }} sm={{ span: 24, offset: 0 }}>\r\n          <h1>Property information form</h1>\r\n          <p>Fill out this form and submit to see comparable value properties</p>\r\n          <br />\r\n        </Col>\r\n      </Row>\r\n      <Form.Item noStyle>\r\n        {/* <PinForm /> */}\r\n        <HomeownerInfo />\r\n      </Form.Item>\r\n\r\n      <Form.Item {...tailFormItemLayout}>\r\n        <Space>\r\n          <Button type=\"danger\" onClick={props.back} >Back</Button>\r\n          <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\r\n        </Space>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PropertyForm;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  Table,\r\n  Row,\r\n  Col,\r\n  Space,\r\n  Divider,\r\n  Card,\r\n} from 'antd';\r\n\r\nconst { Column } = Table;\r\n\r\nconst re = /(\\b[a-z](?!\\s))/g;\r\nconst createTitle = (title) => title.replace('_', ' ').replace(re, (x) => x.toUpperCase());\r\n\r\nconst CharacteristicsTable = (props) => {\r\n  const {\r\n    comparables,\r\n    headers,\r\n    submitAppeal,\r\n    removeComparable,\r\n    back,\r\n  } = props;\r\n  const data = comparables;\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // const headers = {};\r\n  // for (let i = 0; i < data.length; i += 1) {\r\n  //   const property = data[i];\r\n  //   Object.keys(property).forEach((header) => {\r\n  //     headers[header] = 1;\r\n  //   });\r\n  // }\r\n\r\n  const Columns = headers.map(\r\n    (header) => <Column title={createTitle(header)} dataIndex={header} key={header} />,\r\n  ).sort();\r\n\r\n  const labeledData = data.map((property, idx) => ({ property: `Comparable ${idx}`, ...property }));\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col xs={{ span: 24, offset: 0 }} sm={{ span: 24, offset: 0 }}>\r\n          <h1>Select relevant comparables</h1>\r\n          <p>Delete comparables you do not wish to include in your appeal.</p>\r\n          <br />\r\n        </Col>\r\n      </Row>\r\n      <Table dataSource={labeledData} loading={loading} scroll={{ x: true }}>\r\n        <Column title=\"Property\" dataIndex=\"property\" key=\"property\" />\r\n        {Columns}\r\n        <Column\r\n          title=\"Action\"\r\n          key=\"action\"\r\n          render={(text, record) => (\r\n            record.property === 'Your Property' ? null\r\n              : (\r\n                <Button\r\n                  danger\r\n                  onClick={() => {\r\n                    setLoading(true);\r\n                    removeComparable(Number.parseInt(record.property.split(' ')[1], 10)).then(() => {\r\n                      setLoading(false);\r\n                    });\r\n                  }}\r\n                >\r\n                  Delete\r\n                </Button>\r\n              )\r\n          )}\r\n        />\r\n      </Table>\r\n      <Space>\r\n        <Button\r\n          type=\"danger\"\r\n          onClick={back}\r\n        >\r\n          Back\r\n        </Button>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={submitAppeal}\r\n        >\r\n          Generate Appeal\r\n        </Button>\r\n      </Space>\r\n    </>\r\n  );\r\n};\r\n\r\n// displays the target property information\r\nconst PropertyInfo = (props) => {\r\n  const { targetProperty } = props;\r\n  const { cols } = props;\r\n  const gridStyle = {\r\n    width: `${Math.round(100 / cols)}%`,\r\n    textAlign: 'center',\r\n  };\r\n  const characteristics = Object.entries(targetProperty).filter(([title, description]) => (\r\n    title !== '' && description !== ''\r\n  ));\r\n  characteristics.sort(([title1], [title2]) => {\r\n    const t1 = title1.toLowerCase();\r\n    const t2 = title2.toLowerCase();\r\n    if (t1 > t2) { return 1; }\r\n    if (t1 < t2) { return -1; }\r\n    return 0;\r\n  });\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col xs={{ span: 24, offset: 0 }} sm={{ span: 24, offset: 0 }}>\r\n          <h1>Your Property</h1>\r\n          <p>Below is the data that we have on file for your property.</p>\r\n          <br />\r\n        </Col>\r\n      </Row>\r\n      {characteristics.map(([title, description]) => (\r\n        <Card.Grid hoverable={false} style={gridStyle}>\r\n          <Row><b>{createTitle(title)}</b></Row>\r\n          <Row><p>{description}</p></Row>\r\n        </Card.Grid>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nconst Characteristics = (props) => {\r\n  const {\r\n    comparables,\r\n    headers,\r\n    targetProperty,\r\n    submitAppeal,\r\n    removeComparable,\r\n    back,\r\n  } = props;\r\n\r\n  return (\r\n    <>\r\n      <PropertyInfo targetProperty={targetProperty} cols={5} />\r\n      <Divider />\r\n      <CharacteristicsTable\r\n        comparables={comparables}\r\n        headers={headers}\r\n        removeComparable={removeComparable}\r\n        submitAppeal={submitAppeal}\r\n        back={back}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Characteristics;\r\n","import React, { useState } from 'react';\r\n\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Table,\r\n} from 'antd';\r\n\r\nimport axios from 'axios';\r\n\r\nconst lookupPin = async (data) => {\r\n  try {\r\n    console.log(data);\r\n    return (await (axios.post('/api_v1/pin-lookup', data))).data.response.candidates;\r\n  } catch (err) {\r\n    return [];\r\n  }\r\n};\r\n\r\nconst Lookup = (props) => {\r\n  const [form] = Form.useForm();\r\n  const [pins, setPin] = useState([]);\r\n\r\n  const { logPin, city } = props;\r\n\r\n  // TODO: Centralize this mapping\r\n  let appealType;\r\n  if (city === 'detroit') {\r\n    appealType = 'detroit_single_family';\r\n  } else if (city === 'chicago') {\r\n    appealType = 'cook_county_single_family';\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Address',\r\n      dataIndex: 'address',\r\n      key: 'address',\r\n    },\r\n    {\r\n      title: 'Pin',\r\n      dataIndex: 'parcel_num',\r\n      key: 'pin',\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'action',\r\n      render: (text, record) => (\r\n        <Button onClick={() => { logPin(record.parcel_num); }}>Select</Button>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <h2>Pin Lookup</h2>\r\n      <p>Let&apos;s begin by looking up your pin.</p>\r\n      <p style={{ width: '350px' }}>Enter your street number and street name and select the correct property from the dropdown.</p>\r\n      <Form\r\n        form={form}\r\n        name=\"Pin Lookup\"\r\n        onFinish={async (data) => { setPin(await lookupPin({ appeal_type: appealType, ...data })); }}\r\n        labelAlign=\"left\"\r\n        scrollToFirstError\r\n        autoComplete=\"off\"\r\n      >\r\n        <Input.Group compact>\r\n          <Form.Item style={{ width: '100px' }} name=\"st_num\" rules={[{ required: true, message: 'Street name is required.' }]}>\r\n            <Input type=\"number\" placeholder=\"number\" />\r\n          </Form.Item>\r\n          <Form.Item style={{ width: '300px' }} name=\"st_name\" rules={[{ required: true, message: 'Street name is required.' }]}>\r\n            <Input placeholder=\"street\" />\r\n          </Form.Item>\r\n        </Input.Group>\r\n        <Button type=\"primary\" htmlType=\"submit\">Lookup Pin</Button>\r\n      </Form>\r\n      {(pins.length !== 0\r\n        ? (\r\n          <>\r\n            <br />\r\n            <Table columns={columns} dataSource={pins} />\r\n          </>\r\n        )\r\n        : null)}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Lookup;\r\n","import React, { useState } from 'react';\r\nimport { submitAppeal, submitForm } from '../requests';\r\nimport FormInput from './homeowner/form-input';\r\nimport Characteristics from './comparables/characteristics';\r\nimport PinLookup from './homeowner/pin-lookup';\r\n\r\n// TODO: MAKE POST REQUEST TO GRAB NEW COMPARABLE\r\nconst removeComparable = async (properties, idx) => properties.filter((ele, i) => (i !== idx));\r\n\r\nconst Appeal = (props) => {\r\n  const { city } = props;\r\n  const [comparables, setComparables] = useState([]);\r\n  const [headers, setHeaders] = useState([]);\r\n  const [targetProperty, setTargetProperty] = useState(null);\r\n  const [userInfo, setInfo] = useState({});\r\n  const [pin, setPin] = useState(null);\r\n  let view = (\r\n    <PinLookup\r\n      logPin={(selectedPin) => { setPin(selectedPin); }}\r\n      city={city}\r\n    />\r\n  );\r\n\r\n  if (pin != null) {\r\n    view = (\r\n      <FormInput\r\n        city={city}\r\n        pin={pin}\r\n        submitForm={async (info) => {\r\n          const response = await submitForm(info);\r\n          if (response != null) {\r\n            setInfo(info);\r\n            setComparables(response.comparables);\r\n            setHeaders(response.labeled_headers);\r\n            setTargetProperty(response.target_pin[0]); // TODO: pass value not list\r\n          } else {\r\n            // TODO: THROW ERROR\r\n          }\r\n        }}\r\n        back={() => {\r\n          setInfo({});\r\n          setPin(null);\r\n          setComparables([]);\r\n          setHeaders([]);\r\n          setTargetProperty(null);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (targetProperty != null) {\r\n    view = (\r\n      <Characteristics\r\n        comparables={comparables}\r\n        headers={headers}\r\n        targetProperty={targetProperty}\r\n        submitAppeal={async () => { submitAppeal(targetProperty, comparables, userInfo); }}\r\n        removeComparable={async (idx) => {\r\n          setComparables(await removeComparable(comparables, idx));\r\n          console.log(`removed ${idx}`);\r\n        }}\r\n        back={() => {\r\n          setInfo({});\r\n          setComparables([]);\r\n          setHeaders([]);\r\n          setTargetProperty(null);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return view;\r\n};\r\n\r\nexport default Appeal;\r\n","import React from 'react';\r\nimport { Upload, Modal } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nfunction getBase64(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = error => reject(error);\r\n  });\r\n}\r\n\r\nclass PicturesWall extends React.Component {\r\n  state = {\r\n    previewVisible: false,\r\n    previewImage: '',\r\n    previewTitle: '',\r\n    fileList: [\r\n      {\r\n        uid: '-1',\r\n        name: 'image.png',\r\n        status: 'done',\r\n        url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\r\n      },\r\n      {\r\n        uid: '-2',\r\n        name: 'image.png',\r\n        status: 'done',\r\n        url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\r\n      },\r\n      {\r\n        uid: '-3',\r\n        name: 'image.png',\r\n        status: 'done',\r\n        url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\r\n      },\r\n      {\r\n        uid: '-4',\r\n        name: 'image.png',\r\n        status: 'done',\r\n        url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\r\n      },\r\n      {\r\n        uid: '-5',\r\n        name: 'image.png',\r\n        status: 'error',\r\n      },\r\n    ],\r\n  };\r\n\r\n  handleCancel = () => this.setState({ previewVisible: false });\r\n\r\n  handlePreview = async file => {\r\n    if (!file.url && !file.preview) {\r\n      file.preview = await getBase64(file.originFileObj);\r\n    }\r\n\r\n    this.setState({\r\n      previewImage: file.url || file.preview,\r\n      previewVisible: true,\r\n      previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1),\r\n    });\r\n  };\r\n\r\n  handleChange = ({ fileList }) => this.setState({ fileList });\r\n\r\n  render() {\r\n    const { previewVisible, previewImage, fileList, previewTitle } = this.state;\r\n    const uploadButton = (\r\n      <div>\r\n        <PlusOutlined />\r\n        <div className=\"ant-upload-text\">Upload</div>\r\n      </div>\r\n    );\r\n    return (\r\n      <div className=\"clearfix\">\r\n        <Upload\r\n          action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n          listType=\"picture-card\"\r\n          fileList={fileList}\r\n          onPreview={this.handlePreview}\r\n          onChange={this.handleChange}\r\n        >\r\n          {fileList.length >= 8 ? null : uploadButton}\r\n        </Upload>\r\n        <Modal\r\n          visible={previewVisible}\r\n          title={previewTitle}\r\n          footer={null}\r\n          onCancel={this.handleCancel}\r\n        >\r\n          <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport {\r\n  Form,\r\n  Input,\r\n  Radio,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Card,\r\n  Space,\r\n  Upload,\r\n  message,\r\n} from 'antd';\r\nimport ImageWall from './image-upload';\r\n\r\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\r\nconst { TextArea } = Input;\r\n\r\nconst { Option } = Select;\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 24,\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 20,\r\n    },\r\n    md: {\r\n      span: 18,\r\n    },\r\n    lg: {\r\n      span: 14,\r\n    },\r\n  },\r\n};\r\n\r\n\r\nfunction getBase64(img, callback) {\r\n  const reader = new FileReader();\r\n  reader.addEventListener('load', () => callback(reader.result));\r\n  reader.readAsDataURL(img);\r\n}\r\n\r\nfunction beforeUpload(file) {\r\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n  if (!isJpgOrPng) {\r\n    message.error('You can only upload JPG/PNG files!');\r\n  }\r\n  const isLt8M = file.size / 1024 / 1024 < 8;\r\n  if (!isLt8M) {\r\n    message.error('Image must smaller than 8MB!');\r\n  }\r\n  return isJpgOrPng && isLt8M;\r\n}\r\n\r\nclass Avatar extends React.Component {\r\n  state = {\r\n    loading: false,\r\n  };\r\n\r\n  handleChange = info => {\r\n    if (info.file.status === 'uploading') {const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n          offset: 0,\r\n        },\r\n        sm: {\r\n          span: 24,\r\n          offset: 0,\r\n        },\r\n      },\r\n    };\r\n    \r\n    \r\n      this.setState({ loading: true });\r\n      return;\r\n    }\r\n    if (info.file.status === 'done') {\r\n      // Get this url from response in real world.\r\n      getBase64(info.file.originFileObj, imageUrl =>\r\n        this.setState({\r\n          imageUrl,\r\n          loading: false,\r\n        }),\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const uploadButton = (\r\n      <div style={{width: '330px'}}>\r\n        {this.state.loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n        <div className=\"ant-upload-text\">Upload</div>\r\n      </div>\r\n    );\r\n    const { imageUrl } = this.state;\r\n    return (\r\n      <Upload\r\n        name=\"avatar\"\r\n        listType=\"picture-card\"\r\n        className=\"avatar-uploader\"\r\n        showUploadList={false}\r\n        action=\"UPLOAD URL\"\r\n        beforeUpload={beforeUpload}\r\n        onChange={this.handleChange}\r\n      >\r\n        {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\r\n      </Upload>\r\n    );\r\n  }\r\n}\r\n\r\nconst CardBody = (props) => {\r\n  const {id} = props;\r\n\r\n  return (\r\n    <Card\r\n      title={(\r\n        <Form.Item name={`damage_type_${id}`} label=\"Damage Type\" noStyle rules={[{ required: true }]}>\r\n          <Select\r\n            style={{width: '350px'}}\r\n            placeholder=\"Select a option and change input text above\"\r\n            onChange={() => {console.log(id)}}\r\n          >\r\n            <Option value=\"garage\">Garage Damage</Option>\r\n            <Option value=\"roof\">Water Damage</Option>\r\n            <Option value=\"water\">Roof Damage</Option>\r\n          </Select>\r\n        </Form.Item>\r\n)}\r\n      style={{ width: '400px' }}\r\n    >\r\n      <DamageInput id={id}/>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst DamageInput = (props) => {\r\n  const a = 0;\r\n  return (\r\n    <>\r\n      <Form.Item\r\n        name={`damage_description_${props.id}`}\r\n        label=\"Damage Description\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: 'Please add a description of your damage.',\r\n            whitespace: true,\r\n          },\r\n        ]}\r\n        noStyle\r\n      >\r\n        <TextArea rows={4} placeholder=\"Please provide any details regarding the damage.\" />\r\n      </Form.Item>\r\n      <br/>\r\n      <br/>\r\n      <p>Please upload any images of the damage.</p>\r\n      <Form.Item\r\n        name={`damage_image_${props.id}`}\r\n        label=\"Damage Image\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: 'Please input damage information!',\r\n            whitespace: true,\r\n          },\r\n        ]}\r\n        noStyle\r\n      >\r\n        <Avatar></Avatar>\r\n      </Form.Item>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardBody;\r\n","import 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Layout } from 'antd';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from 'react-router-dom';\r\nimport Header from './general/header';\r\nimport LandingPage from './landing/landing-page';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Appeal from './appeal/appeal';\r\n\r\nimport DamageInput from './appeal/damage/damages';\r\nimport PinLookup from './appeal/homeowner/pin-lookup';\r\n\r\nconst { Content, Footer } = Layout;\r\n\r\nconst Page = () => (\r\n  <Router>\r\n    <Layout className=\"layout\">\r\n      <Header />\r\n      <Content style={{ padding: '0 3vw' }}>\r\n        <div className=\"site-layout-content\">\r\n          <Switch>\r\n            <Route\r\n              path=\"/detroit\"\r\n              render={() => <Appeal city=\"detroit\" />}\r\n            />\r\n            <Route\r\n              path=\"/chicago\"\r\n              render={() => <Appeal city=\"chicago\" />}\r\n            />\r\n            <Route\r\n              path=\"/test\"\r\n              render={() => <PinLookup />}\r\n              // render={() => <DamageInput />}\r\n            />\r\n            <Route\r\n              path=\"/\"\r\n              render={() => <LandingPage />}\r\n            />\r\n          </Switch>\r\n        </div>\r\n      </Content>\r\n      <Footer style={{ textAlign: 'center' }}>Property Tax Appeal Project</Footer>\r\n    </Layout>\r\n  </Router>\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Page />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}